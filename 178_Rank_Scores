Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. 
Note that after a tie, the next ranking number should be the next consecutive integer value. 
In other words, there should be no "holes" between ranks.

+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+

For example, given the above Scores table, your query should generate the following report (order by highest score):

+-------+------+
| Score | Rank |
+-------+------+
| 4.00  | 1    |
| 4.00  | 1    |
| 3.85  | 2    |
| 3.65  | 3    |
| 3.65  | 3    |
| 3.50  | 4    |
+-------+------+



1. Get the distinct rows that are <= each score, count them and wrap them in an external SELECT for formatting.

SELECT s.Score, rank.larger AS Rank
FROM Scores s, 
    (
    SELECT s1.Score AS Score, COUNT(s1.Score) AS larger
    FROM 
        (
            SELECT DISTINCT Score
            FROM Scores
        ) AS s1, 
        (
            SELECT DISTINCT Score
            FROM Scores
        ) AS s2
    WHERE s1.Score <= s2.Score
    GROUP BY s1.Score
    ) AS rank
WHERE s.Score = rank.Score
ORDER BY s.Score DESC



2. This query counts, for each score, the number of distinct greater or equal scores.

SELECT s.Score, (
    SELECT COUNT(DISTINCT Score)
    FROM Scores 
    WHERE Score >= s.Score) AS Rank
FROM Scores s
ORDER BY Score DESC


3. Same as the previous one, but with a subquery that "uniquifies" the scores first.

SELECT a.Score, (SELECT COUNT(*) 
                 FROM (
                     SELECT DISTINCT Score 
                     FROM Scores
                     ) AS distinct_s
                 WHERE distinct_s.Score >= a.Score
                 ) AS Rank
FROM Scores a                 
ORDER by a.Score DESC;

